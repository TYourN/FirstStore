<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		
		
		
		<context:component-scan base-package="com.xian.ssm.controller"></context:component-scan>

<!-- 对静态资源的解析 ,包括：js、css、img-->
<mvc:resources location="/js/" mapping="/js/**"/>

<!-- 使用 mvc:annotation-driven代替上面的注解映射器和注解适配器配置
mvc:annotation-driven：加载了很多参数的绑定方法，比如JSON转换解析器就默认加载了。
实际开发用它。-->
 <mvc:annotation-driven conversion-service="conversionService" validator="validator">
  
 </mvc:annotation-driven> 

<!-- 处理器适配器
所有的处理器适配器都是实现了HandlerAdapter的接口 -->
<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

<!-- 另一个非注解适配器 -->
<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean> 

<!-- 视图解析器
解析jsp视图,默认使用jstl标签，classpath下的所有包 -->
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
   <!-- 配置jsp路径的前缀 -->
   <property name="prefix" value="/WEB-INF/jsp/"/>
   <!-- 配置jsp路径的后缀 -->
   <property name="suffix" value=".jsp"/>
</bean>

<!-- 自定义参数绑定 -->
<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
   <!-- 转换器 -->
   <property name="converters">
	  <list>
	    <!-- 日期类型的转换 -->
		<bean class="com.xian.ssm.controller.converter.CustomDateConverter"/>
	  </list>
   </property>
</bean>

<!-- 校验器 -->
<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器-->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名-->
		<property name="basenames">   
       	 <list>    
            <value>classpath:CustomValidationMessages</value> 
       	 </list>   
    	</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>
	
	<!--拦截器 -->
<mvc:interceptors>
	<!--多个拦截器,顺序执行 -->
	<!-- 登录认证拦截器 -->
	<mvc:interceptor>
		<mvc:mapping path="/**"/>
		<bean class="com.xian.ssm.interceptor.LoginHandlerInterceptor"></bean>
	</mvc:interceptor>
	
	<mvc:interceptor>
		<mvc:mapping path="/**"/>
		<bean class="com.xian.ssm.interceptor.HandlerInterceptor1"></bean>
	</mvc:interceptor>
	<mvc:interceptor>
		<mvc:mapping path="/**"/>
		<bean class="com.xian.ssm.interceptor.HandlerInterceptor2"></bean>
	</mvc:interceptor>
</mvc:interceptors>
	
</beans>